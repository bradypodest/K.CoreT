<?xml version="1.0"?>
<doc>
    <assembly>
        <name>K.Core</name>
    </assembly>
    <members>
        <member name="T:K.Core.AOP.CacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="M:K.Core.AOP.CacheAOPbase.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            AOP的拦截方法
            </summary>
            <param name="invocation"></param>
        </member>
        <member name="M:K.Core.AOP.CacheAOPbase.CustomCacheKey(Castle.DynamicProxy.IInvocation)">
            <summary>
            自定义缓存的key
            </summary>
            <param name="invocation"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.AOP.CacheAOPbase.GetArgumentValue(System.Object)">
            <summary>
            object 转 string
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:K.Core.AOP.LogAOP">
            <summary>
            拦截器BlogLogAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:K.Core.AOP.LogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:K.Core.AOP.RedisCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="M:K.Core.AuthHelper.OverWrite.JwtHelper.IssueJwt(K.Core.AuthHelper.OverWrite.TokenModelJwt)">
            <summary>
            颁发JWT字符串   （好像无用）
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.AuthHelper.OverWrite.JwtHelper.SerializeJwt(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:K.Core.AuthHelper.OverWrite.TokenModelJwt">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:K.Core.AuthHelper.OverWrite.TokenModelJwt.Uid">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:K.Core.AuthHelper.OverWrite.TokenModelJwt.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:K.Core.AuthHelper.OverWrite.TokenModelJwt.Work">
            <summary>
            职能
            </summary>
        </member>
        <member name="T:K.Core.AuthHelper.JwtToken">
            <summary>
            JWTToken生成类
            </summary>
        </member>
        <member name="M:K.Core.AuthHelper.JwtToken.BuildJwtToken(System.Security.Claims.Claim[])">
            <summary>
            获取基于JWT的Token  
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.AutoMapper.CustomProfile.#ctor">
            <summary>
            配置构造函数，用来创建关系映射
            </summary>
        </member>
        <member name="F:K.Core.Controllers.Base.BaseController`3._service">
            <summary>
            这个是对应实体类的 service
            </summary>
        </member>
        <member name="M:K.Core.Controllers.Base.BaseController`3.GetPageData(K.Core.Model.PageDataOptions)">
            <summary>
            base 分页获取
            </summary>
            <param name="pageDataOptions">分页参数</param>
            <returns></returns>
        </member>
        <member name="M:K.Core.Controllers.Base.BaseController`3.GetOneByID(System.String)">
            <summary>
            base 根据id获取单独的一个实体  （看情况是否需要重写）
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.Controllers.Base.BaseController`3.Add(`1)">
            <summary>
            base 增加一个实体 （看情况是否重写）
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.Controllers.Base.BaseController`3.Update(`1)">
            <summary>
            base 更新一个实体 （需要在各自实体control重写,实体类service中写最新的方法）
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.Controllers.Base.BaseController`3.Delete(System.String)">
            <summary>
            base 根据id 删除一个实体
            </summary>
            <param name="ID"></param>
            <returns></returns>
        </member>
        <member name="T:K.Core.Controllers.LoginController">
            <summary>
            
            </summary>
        </member>
        <member name="M:K.Core.Controllers.LoginController.Login(System.String,System.String)">
            <summary>
            获取token 
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="T:K.Core.Controllers.System.SysMenuController">
            <summary>
            菜单 
            </summary>
        </member>
        <member name="M:K.Core.Controllers.System.SysMenuController.GetMenuTree(System.String)">
            <summary>
            获取菜单树
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.Controllers.System.SysMenuController.GetUserMenuTree(System.String)">
            <summary>
            获取用户的菜单树
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:K.Core.Controllers.System.SysMenuPowerGController">
            <summary>
            菜单权限组
            </summary>
        </member>
        <member name="M:K.Core.Controllers.System.SysMenuPowerGController.GetMenuPowerGroups(System.String)">
            <summary>
            获取菜单权限
            </summary>
            <param name="menuId"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.Controllers.System.SysMenuPowerGController.UpdateMenuPowerGroups(System.Collections.Generic.List{K.Core.Model.ViewModels.System.SysMenuPowerGroupVM})">
            <summary>
            更新菜单权限
            </summary>
            <param name="sysMenuPowerGVMs"></param>
            <returns></returns>
        </member>
        <member name="T:K.Core.Controllers.System.SysPowerController">
            <summary>
            权限
            </summary>
        </member>
        <member name="T:K.Core.Controllers.System.SysPowerGroupController">
            <summary>
            权限组
            </summary>
        </member>
        <member name="T:K.Core.Controllers.System.SysRoleController">
            <summary>
            角色
            </summary>
        </member>
        <member name="T:K.Core.Controllers.System.SysRoleMenuPowerGController">
            <summary>
            用户角色菜单权限组
            </summary>
        </member>
        <member name="T:K.Core.Controllers.System.SysUserController">
            <summary>
            用户管理
            </summary>
        </member>
        <member name="M:K.Core.Controllers.System.SysUserController.GetInfoByToken(System.String)">
            <summary>
            获取用户详情根据token
            【无权限】
            </summary>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="T:K.Core.Services.GlobalRouteAuthorizeConvention">
            <summary>
            Summary:全局路由权限公约
            Remarks:目的是针对不同的路由，采用不同的授权过滤器
            如果 controller 上不加 [Authorize] 特性，默认都是 Permission 策略
            否则，如果想特例其他授权机制的话，需要在 controller 上带上  [Authorize]，然后再action上自定义授权即可，比如 [Authorize(Roles = "Admin")]
            </summary>
        </member>
        <member name="T:K.Core.Services.GlobalAuthorizeFilter">
            <summary>
            全局权限过滤器【无效】
            </summary>
        </member>
        <member name="T:K.Core.Services.GlobalExceptionsFilter">
            <summary>
            全局异常错误日志
            </summary>
        </member>
        <member name="M:K.Core.Services.GlobalExceptionsFilter.WriteLog(System.String,System.Exception)">
            <summary>
            自定义返回格式
            </summary>
            <param name="throwMsg"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="P:K.Core.Services.JsonErrorResponse.Message">
            <summary>
            生产环境的消息
            </summary>
        </member>
        <member name="P:K.Core.Services.JsonErrorResponse.DevelopmentMessage">
            <summary>
            开发环境的消息
            </summary>
        </member>
        <member name="T:K.Core.Services.GlobalRoutePrefixFilter">
            <summary>
            全局路由前缀公约
            </summary>
        </member>
        <member name="T:K.Core.Middlewares.RequRespLogMildd">
            <summary>
            中间件
            记录请求和响应数据
            </summary>
        </member>
        <member name="F:K.Core.Middlewares.RequRespLogMildd._next">
            <summary>
            
            </summary>
        </member>
        <member name="M:K.Core.Middlewares.RequRespLogMildd.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            
            </summary>
            <param name="next"></param>
            <param name="blogArticleServices"></param>
        </member>
        <member name="M:K.Core.Middlewares.RequRespLogMildd.RequestDataLog(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            记录下请求的路径和参数
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:K.Core.Middlewares.RequRespLogMildd.ResponseDataLog(Microsoft.AspNetCore.Http.HttpResponse,System.IO.MemoryStream)">
            <summary>
            写入log:返回的参数
            </summary>
            <param name="response"></param>
            <param name="ms"></param>
        </member>
        <member name="T:K.Core.ModelStateExtension">
            <summary>
            ModelState扩展类
            </summary>
        </member>
        <member name="M:K.Core.ModelStateExtension.GetFirstErrMsg(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)">
            <summary>
            获取模型绑定中的第一条错误信息
            </summary>
            <param name="msDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.ModelStateExtension.GetErrMsgList(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)">
            <summary>
             获取错误信息列表
            </summary>
            <param name="msDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:K.Core.ModelStateExtension.GetAllErrMsgStr(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary,System.String)">
            <summary>
            获取ModelState所有错误信息，间隔符间隔
            </summary>
            <param name="splitStr">间隔符</param>
            <returns></returns>
        </member>
        <member name="P:K.Core.Startup.Repository">
            <summary>
            log4net 仓储库
            </summary>
        </member>
        <member name="T:K.Core.SwaggerHelper.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:K.Core.SwaggerHelper.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义   控制Swagger版本
            </summary>
        </member>
        <member name="F:K.Core.SwaggerHelper.CustomApiVersion.ApiVersions.V1">
            <summary>
            V1 版本
            </summary>
        </member>
        <member name="F:K.Core.SwaggerHelper.CustomApiVersion.ApiVersions.V2">
            <summary>
            V2 版本
            </summary>
        </member>
        <member name="T:K.Core.SwaggerHelper.CustomRouteAttribute">
            <summary>
            自定义路由 /api/{version}/[controler]/[action]
            IApiDescriptionGroupNameProvider 接口也是[ApiExplorerSettings(GroupName = "v2")] 的实现接口
            现在将 Route特性与ApiExplorerSettings 特性合并成一个特性
            </summary>
        </member>
        <member name="P:K.Core.SwaggerHelper.CustomRouteAttribute.GroupName">
            <summary>
            分组名称,是来实现接口 IApiDescriptionGroupNameProvider
            </summary>
        </member>
        <member name="M:K.Core.SwaggerHelper.CustomRouteAttribute.#ctor(System.String)">
            <summary>
            自定义路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
        </member>
        <member name="M:K.Core.SwaggerHelper.CustomRouteAttribute.#ctor(K.Core.SwaggerHelper.CustomApiVersion.ApiVersions,System.String)">
            <summary>
            自定义版本+路由构造函数，继承基类路由
            </summary>
            <param name="actionName"></param>
            <param name="version"></param>
        </member>
    </members>
</doc>
